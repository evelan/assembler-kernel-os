USTAW_TAKT_ZEGARA   PROC
;Parametry procedury:
;BX - nowy licznik uk³adu
;   0 L___B         0 - wybór zegara 0, L - LSB nastêpnie MSB, ___ - tryb, B - binarnie
  MOV AL, 00110100B
  OUT 43H, AL       		;Ustawienie trybu pracy.
;Poni¿ej nastêpuje ustawianie licznika uk³adu:
  MOV AL, BL
  OUT 40H, AL
  MOV AL, BH
  OUT 40H, AL
  RET
USTAW_TAKT_ZEGARA   ENDP

ZAMIEN_CZESTOTLIWOSC_NA_DZIELNIK PROC
;Parametry procedury:
;EBX - czêstotliwoœæ.
;Wyniki:
;BX - dzielnik czêstotliwoœci.
  XOR EDX, EDX
  MOV EAX, 1193180     	;Czêstotliwoœæ zegara.
  DIV EBX               ;Dzielenie EDX:EAX przez EBX.
  CMP EAX, 0FFFFH
  JB DALEJ_CZ_ 
  MOV AX, 0FFFFH     ;Je¿eli wynik wiêkszy, to wtedy nale¿y ustawiæ maksymaln¹ mo¿liw¹ wartoœæ.
  DALEJ_CZ_: 
  MOV BX, AX 
  RET
ZAMIEN_CZESTOTLIWOSC_NA_DZIELNIK ENDP

USTAW_CZESTOTLIWOSC_ZEGARA PROC
;Parametry procedury:
;EBX - ma zawieraæ now¹ czêstotliwoœæ w Hz  (sensownie  jest ebx ustawiæ na wielkoœæ wiêksz¹ od 18, bo
; przy mniejszej i to  dzielnik przyjmie najwiêksz¹ wartoœæ dla zmiennej typu word )
  CALL ZAMIEN_CZESTOTLIWOSC_NA_DZIELNIK
  CALL USTAW_TAKT_ZEGARA
  RET                                        				
USTAW_CZESTOTLIWOSC_ZEGARA ENDP

SPRAWDZ_BUFOR_KLAWIATURY    MACRO
  LOCAL BRAK_GOTOWOSCI_KLAWIATURY
  BRAK_GOTOWOSCI_KLAWIATURY:
    IN AL, 64H    		;Pobranie rejestru stanu.
    MOV AH, 00100001B  		;Pozostawienie bitów 0- stan bufora wejœciowego ( 0-pusty,
                       		;1-sa dane) bit 5- z jakiego uk³adu dane pochodz¹
                       		;0- z klawiatury, 1- z jednostki dodatkowej.
    AND AL, AH
    CMP AL, 1          		;Oczekiwanie na dane pochodz¹ce z klawiatury.	
  JNE BRAK_GOTOWOSCI_KLAWIATURY
ENDM

ZWROC_SELEKTOR_TSS_AKTUALNEGO_ZADANIA PROC
  PUSH AX
  PUSH DI
  MOV AX, DS
  PUSH AX
  MOV AX, 8
  MOV DS, AX 
  MOV AL, INT_ON  		;Je¿eli wielozadaniowoœæ nie funkcjonuje, to istnieje
                      		;mo¿liwoœæ braku kolejki zadañ, wiec nale¿y wyjœæ z procedury.
  CMP AL, 0
  JE KONIEC_PROC_ZWRAC_TSS
  MOV DI, [BX].POCZATEK_ ;Do di ³adowany jest adres pierwszego elementu 
;kolejki zadañ- czyli elementu okreœlaj¹cego aktualnie  dzia³aj¹ce zadanie.
  MOV SI, DI
  IFDEF ZMIANA_KODU
    MOV ECX, [DS:DI] 	;Do ecx ³adowane jest pole danych pierwszego elementu kolejki zadañ.
  ELSE
    MOV CX, [DS:DI]   	;Do cx ³adowane jest pole danych pierwszego elementu kolejki zadañ.
  ENDIF
  KONIEC_PROC_ZWRAC_TSS:
  POP AX
  MOV DS, AX 
  POP DI
  POP AX
  RET
ZWROC_SELEKTOR_TSS_AKTUALNEGO_ZADANIA ENDP

INICJUJ_PULE_DYNAMICZNA PROC
;Parametry procedury:
;Rejestry es:di maj¹ zawieraæ adres pocz¹wszy, od którego zostanie utworzona sterta.
;Rejestr dx ma zawieraæ wielkoœæ pola danych pojedynczego elementu (liczba ponad 2 bajty, dodawana jest do 
;tego rozmiaru gdy¿ wspierane s¹ 16 bitowe wskaŸniki nastêpnych elementów). Rejestr cx ma zawieraæ iloœæ 
;elementów do utworzenia.
;Wyniki:
;Procedura na pierwszych 16 bitach umieœci adres pierwszego wolnego elementu sterty.
  IFNDEF ZMIANA_KODU
    MOV DX, WIELKOSC_ELEMENTU
  ENDIF
  PUSH DI   
  PUSH AX    
  MOV AX, ES    
  PUSH AX   
  MOV AX, 8     
  MOV ES, AX 
  JCXZ KONIEC_PROCEDURY_PULE1 ;Je¿eli nic nie jest do dodania, to nastêpuje
                                   			;skok na koniec procedury.

;Adres pocz¹tku puli chowany do ax, a nastêpnie zwiêkszany o 2:
  MOV AX, DI 
  ADD AX, 2    
  MOV [ES:DI], AX  		;Pierwszym wolnym elementem bêdzie element oddalony
                       		;o 2 bajty od pocz¹tku puli.
  ADD DI, 2   			;Ustawienie adresu na pierwszy element sterty.
;Poni¿sza pêtla odpowiedzialna jest za wype³nienie ca³ego obszaru puli dynamicznej okreœlon¹ liczb¹ 
;elementów (element sk³ada siê z pola danych i wskaŸnika na nastêpny wolny element):
  PETLA_PULE1:
    ADD DI, DX  		;Dodawana wielkoœæ danych elementu (adres nastêpnego
                                ;elementu bêdzie zawarty na koñcu elementu -
                                ;po w³aœciwej jego zawartoœci).
    MOV AX, DI  
    ADD AX, 2 ;To jest adres nastêpnego elementu, gdy¿ jest on po³o¿ony o 2 bajty dalej.
    MOV [ES:DI], AX  	;Na pozycji nastêpnego  elementu w elemencie obecnym
                            				;zapisywany jest wczeœniej obliczony adres.
    ADD DI, 2  		;W kolejnym przebiegu pêtli te same czynnoœci bêd¹ 
;wykonywane z kolejnym elementem (wiêc rejestr di 
;inicjowany jest jego adresem).
  LOOP PETLA_PULE1 
  SUB DI, DX     
  MOV WORD PTR [ES:DI], 0 ;W przypadku ostatniego elementu, adres nastêpnego elementu
                          				;ustawiamy na 0 (null).
  KONIEC_PROCEDURY_PULE1: 
  POP AX   
  MOV ES, AX   
  POP AX     
  POP DI    
  RET     
INICJUJ_PULE_DYNAMICZNA ENDP

POBIERZ_ELEMENT_Z_PULI PROC
;Parametry procedury:
;DI - adres sterty,
;DX - rozmiar pola danych elementu.
;Wyniki:
;W rejestrze Di zwrócony zostanie adres elementu, ewentualnie 0 gdy pula jest przepe³niona.
  IFNDEF ZMIANA_KODU
    MOV DX, WIELKOSC_ELEMENTU
  ENDIF
  PUSH AX         
  PUSH SI
  PUSH BX
  MOV AX, ES
  PUSH AX
  MOV AX, 8
  MOV ES, AX
  MOV SI, [ES:DI] 		;Do rejestru si ³adowany jest adres pierwszego wolnego elementu puli.
  CMP SI, 0     		;Gdy pierwsze 2 bajty puli dynamicznej zawieraj¹ wartoœæ 0, 
;oznacza to, ¿e pula nie zawiera wolnych elementów.
  JE PULA_W_CALOSCI_JEST_ZAJETA
  MOV BX, SI 			;W przeciwnym wypadku w rejestrze bx przechowywany jest
;adres do pierwszego wolnego elementu.
  ADD SI, DX 			;Do adresu pierwszego wolnego elementu dodawana jest
                            				;wielkoœæ jego pola danych - w ten sposób otrzymany zostaje 
;adres pola przechowuj¹cego adresu nastêpnego wolnego elementu puli.
  MOV AX, [ES:SI] 		;Pole nastêpnego elementu kopiowane jest do rejestru ax. 
  MOV [ES:DI], AX 		;I umieszczane pod adresem puli - czyli teraz pocz¹tek
                            	;puli wskazuje na nowy wolny element.
  MOV DI, BX      		;W DI umieszczany adres uzyskanego elementu puli.
  JMP KONIEC_PROCEDURY_PULE2
  PULA_W_CALOSCI_JEST_ZAJETA:
;Je¿eli w puli nie ma wolnych elementów w rejestrze di zwracane jest 0:
  XOR DI, DI       
  KONIEC_PROCEDURY_PULE2:
  POP AX       
  MOV ES, AX
  POP BX
  POP SI
  POP AX
  RET
POBIERZ_ELEMENT_Z_PULI ENDP

DOLOZ_ELEMENT_DO_PULI PROC
;Parametry procedury:
;SI - adres elementu,
;DI - adres sterty,
;DX - rozmiar pola danych.
  PUSH AX                   							
  PUSH BX      
  MOV AX, ES
  PUSH AX 
  MOV AX, 8
  MOV ES, AX
  MOV AX, [ES:DI] 		;Teraz w rejestrze ax znajduje siê adres pierwszego wolnego
                         	;elementu sterty (ewentualnie null).
  MOV [ES:DI], SI 		;W miejsce wskazuj¹ce pierwszy wolny element puli wpisywany jest
                         	;adres w³aœnie dok³adanego elementu.
  ADD SI, DX   			;Do adresu dok³adanego elementu dodawany jest rozmiar jego pola
                         	;danych, uzyskuje siê w ten sposób adres pola, które ma wskazywaæ
                         	;nastêpny element.
  MOV [ES:SI], AX 		;W pole nastêpnego elementu, znajduj¹ce siê
                         	;w w³aœnie dok³adanym elemencie, wpisywany jest
                         	;adres pierwszego elementu pobranego poprzednio z puli.
  POP AX
  MOV ES, AX
  POP BX   
  POP AX 
  RET
DOLOZ_ELEMENT_DO_PULI ENDP


DOLOZ_ELEMENT_NA_KONIEC_KOLEJKI PROC
;Parametry procedury:
;SI - adres dok³adanego elementu,
;DI - adres ostatniego elementu kolejki,
;Sta³a WIELKOSC_ELEMENTU - okreœla rozmiar pola danych elementów kolejki.
  PUSH AX
  PUSH SI
  PUSH BX
  MOV AX, ES
  PUSH AX
  MOV AX, 8  
  MOV ES, AX 
  CMP DI, 0    			;Sprawdzenie warunku, czy kolejka nie jest pusta.
  JNE KOLEJKA_NIE_JEST_PUSTA
;Poni¿szy kod wykona siê w sytuacji, gdy kolejka nie zawiera ¿adnego elementu:
  MOV DI, SI  			;Ustawiany jest adres ostatniego elementu
                        	;na adres w³aœnie dok³adanego elementu.
  JMP ZEROWANIE_POLA_NASTEPNEGO_ELEMENTU 
  KOLEJKA_NIE_JEST_PUSTA:   
;Poni¿sze polecenia wykonuj¹ siê, gdy kolejka nie jest pusta:
  ADD DI, WIELKOSC_ELEMENTU ;Rejestr di ustawiany jest na adres pola adresu 
;nastêpnego elementu znajduj¹cego siê 
;w dotychczas ostatnim elemencie kolejki.
  MOV [ES:DI], SI 		;Pole to wype³niane jest adresem w³aœnie dok³adanego elementu. 

  MOV DI, SI  			;Rejestr di nastawiany jest na do³o¿ony element (ostatni
                        	;element kolejki).
  ZEROWANIE_POLA_NASTEPNEGO_ELEMENTU:
;Poni¿sze instrukcje maj¹ na celu wyzerowaæ pole nastêpnego elementu
;we w³aœnie do³o¿onym elemencie (ostatni element wskazuje na null):
  ADD SI, WIELKOSC_ELEMENTU 
  MOV WORD PTR [ES:SI], 0 ;Ustawiane jest pole nastêpnego elementu na null.
  POP AX 
  MOV ES, AX
  POP BX
  POP SI 
  POP AX
  RET 
DOLOZ_ELEMENT_NA_KONIEC_KOLEJKI ENDP

ROTUJ_KOLEJKE_W_LEWO_Z_PRZENIESIENIEM_NA_KONIEC PROC
;Parametry procedury:
;DI - adres pierwszego elementu kolejki,
;SI - adres ostatniego elementu kolejki.
;Wyniki:
;rejestr DI bêdzie wskazywa³ na nowy pierwszy element kolejki,
;rejestr SI bêdzie wskazywa³ na element ostatni.
  PUSH AX
  MOV AX, ES
  PUSH AX
  MOV AX, 8
  MOV ES, AX
  CMP SI, DI
  JE KOLEJKA_ZAWIERA_TYLKO_JEDEN_ELEMENT ;W przypadku, gdy kolejka zawiera tylko
                                         ;jeden element, nie jest wykonywana rotacja.
  ADD SI, WIELKOSC_ELEMENTU 		;W ten sposób uzyskiwany jest adres 
					;pola nastêpnego elementu  w elemencie ostatnim.
  MOV [ES:SI], DI 			;Teraz elementem ostatnim jest element przed chwil¹ pierwszy.
  MOV SI, DI
  MOV DI, [ES:DI+WIELKOSC_ELEMENTU] 	;Elementem drugi teraz jest pierwszym.
  MOV WORD PTR [ES:SI+WIELKOSC_ELEMENTU], 0 ;Ustawiany null w polu 
					;nastêpnego elementu w elemencie ostatnim.
  KOLEJKA_ZAWIERA_TYLKO_JEDEN_ELEMENT:
  POP AX
  MOV ES, AX
  POP AX
  RET
ROTUJ_KOLEJKE_W_LEWO_Z_PRZENIESIENIEM_NA_KONIEC ENDP


DODAJ_ZADANIE_DO_KOLEJKI_ZADAN PROC
;Parametry procedury:
;AX - identyfikator procesu,
;DS:BX - adres kolejki zadañ.
  PUSH AX 
  PUSH DX
  PUSH BX 
  PUSH CX 
  PUSH SI
  PUSH DI
  MOV CX, ES
  PUSH CX   
  MOV CX, 8    
  MOV ES, CX  
  IFNDEF DWIE_KOLEJKI
    MOV BX, OFFSET KOLEJKA_ZADAN
  ENDIF   
;Poni¿ej czynnoœci zwi¹zane z uzyskaniem elementu ze sterty:
  MOV DI,  [BX].ADRES_PULI_  
  MOV DX, WIELKOSC_ELEMENTU   
  CALL POBIERZ_ELEMENT_Z_PULI   
;di zawiera adres pobranego elementu puli (ewentualnie 0 gdy pula jest ca³kowicie zajêt¹).
  CMP DI, 0  			;Sprawdzenie, czy uzyskano element z puli dynamicznej. 
  JNE PULA_ZWROCILA_ELEMENT  
;Tutaj program dotrze w przypadku ca³kowicie zajêtej puli:
  JMP KONIEC_PROCEDURY_DOD_PUL  
  PULA_ZWROCILA_ELEMENT:  
  MOV [ES:DI], AX  		;Pod adres pola danych w nowo pobranym elemencie puli
                           	;zapisywany jest selektor TSS
  IFDEF PRIORYTETY
    SHR EAX, 16
    MOV [ES:DI+2], AL
  ENDIF
  IFDEF POSTARZANIE
    SHR EAX, 16
    MOV [ES:DI+2], AX
  ENDIF
  MOV SI, DI      		;Adres samego elementu chowany do rejestru si.
  MOV DI, [BX].KONIEC_    	; Pobierany jest adres ostatniego elementu kolejki zadañ.
  MOV DX, WIELKOSC_ELEMENTU 	;Ustawiana jest wielkoœæ pola danych elementu
                                ;kolejki ( niezbêdne by wywo³aæ poni¿sz¹ procedurê). 
  CALL DOLOZ_ELEMENT_NA_KONIEC_KOLEJKI 
;Poni¿ej znajduj¹ siê czynnoœci zwi¹zane z uaktualnieniem zmiennej KOLEJKA_ZADAN
;trzymaj¹cej adresy pocz¹tku i koñca kolejki:
  MOV AX, 0   
  CMP AX, [BX].POCZATEK_   ;Je¿eli adres pierwszego elementu kolejki jest 0 to znaczy, ze procedura 
;do³o¿y³a pierwszy element ( dot¹d kolejka by³a pusta). nale¿y wiêc w tym miejscu wpisaæ do zmiennej
;KOLEJKA_ZADAN do pola POCZATEK adres jedynego elementu kolejki.
  JNE KOLEJKA_ZAWIERA_WIECEJ_NIZ_JEDEN_ELEMENT 
  MOV [BX].POCZATEK_, DI 	;Aktualizowany pocz¹tkek kolejki. 
  KOLEJKA_ZAWIERA_WIECEJ_NIZ_JEDEN_ELEMENT:  
  MOV [BX].KONIEC_, DI    	;Aktualizowany koniec kolejki.
  KONIEC_PROCEDURY_DOD_PUL:       
  POP CX           
  MOV ES, CX      
  POP DI  
  POP SI   
  POP CX   
  POP BX   
  POP DX      
  POP AX       
  RET                  
DODAJ_ZADANIE_DO_KOLEJKI_ZADAN ENDP

PRZELACZ_ZADANIA PROC
  IFNDEF DWIE_KOLEJKI
    MOV BX, OFFSET KOLEJKA_ZADAN
  ENDIF
  PUSH CX 
  MOV CX, ES 
  PUSH CX 
  MOV CX, 8 
  MOV ES, CX 
;Poni¿ej przygotowania do wywo³ania procedury ROTUJ_KOLEJKE_W_LEWO_Z_PRZENIESIENIEM_NA_KONIEC:
  MOV DI,  [BX].POCZATEK_ 
  MOV SI,  [BX].KONIEC_ 
  MOV DX, WIELKOSC_ELEMENTU  
  CALL ROTUJ_KOLEJKE_W_LEWO_Z_PRZENIESIENIEM_NA_KONIEC  
;Nowe wartoœci pocz¹tku i koñca kolejki:
  MOV [BX].POCZATEK_, DI    
  MOV [BX].KONIEC_, SI 
;Procedura w rejestrze di zwróci³a pole danych elementu kolejki zadañ znajduj¹cego
;siê na pocz¹tku kolejki.
  MOV SI, DI
  MOV DI, [ES:DI] 
  POP CX 
  MOV ES, CX  
  POP CX   
  RET                                                                                
PRZELACZ_ZADANIA ENDP

EXC_ 	PROC			;Procedura obs³ugi wyj¹tku   
  MOV AX,32     
  MOV ES,AX			;Wyœwietlenie na ekranie tekstu spod zmiennej TEKST
  MOV BX,OFFSET TEKST          
  MOV CX,42
  MOV AL,[BX]
  MOV SI,0
  PETLA: 
    MOV ES:[SI+840],AL
    MOV AL,ATRYB
    MOV ES:[SI+841],AL
    ADD BX,1
    ADD SI,2
    MOV AL,[BX]
  LOOP PETLA
  JMP KONIEC
EXC_ ENDP



