CZY_DOSTEPNY_FAST_A20 MACRO
LOCAL BRAK, KONIEC_A20
  MOV AX, DANE
  MOV DS, AX
  MOV AX, 2403H
  INT 15H
  JC BRAK_A20
  CMP AH, 0
  JNE BRAK_A20
  TEST BX, 2
  JZ BRAK_A20
  MOV FAST_A20, 1
  JMP KONIEC_A20
  
  BRAK_A20:
  MOV FAST_A20, 0
  KONIEC_A20:
ENDM

CZY_A20 MACRO
  PUSH AX
  PUSH BX
  MOV AL, [0:0]
  MOV BL, AL
  NOT BL
  XCHG BL, [0FFFFH:10H]
  CMP AL, [0:0]
  MOV [0FFFFH:10H], BL
  POP BX
  POP AX
ENDM

A20_ON MACRO
LOCAL KONIEC_A20,BRAK_FAST_A20, PETLA1_A20, PETLA2_A20, PETLA3_A20, PETLA4_A20
;Czy A20 ju¿ aktywne:
  MOV A20,0
  CZY_A20
  JE KONIEC_A20
  CMP FAST_A20, 1
  JNE BRAK_FAST_A20
;Fast a20:
  MOV A20, 1
  IN AL, 92H
  OR AL, 2
  AND AL, 0FEH
  OUT 92H, AL
  CZY_A20
  JE KONIEC_A20
  
  BRAK_FAST_A20:
;Uaktywnienie A20 poprzez sterownik klawiatury:
;Oczekiwanie na pusty bufor wejœciowy:
  XOR AX, AX
  PETLA1_A20:
  IN AL, 64H
  BTR AX, 1
  JC PETLA1_A20
  
;Wys³anie komendy odczytu portu wyjœciowego:
  MOV AL, 0D0H    		;Rozkaz odczytu portu wyjœciowego.
  OUT 64H, AL
  XOR AX, AX
  PETLA2_A20:
  IN AL, 64H
  BTR AX, 0     		;Stan bufora wyjœciowego (0 pusty, 1 dane s¹ jeszcze w buforze).
  JNC PETLA2_A20
  
;Odczyt stanu portu wyjœciowego:
  XOR AX, AX
  IN AL, 60H
  PUSH AX
  PETLA3_A20:
  IN AL, 64H
  BTR AX, 1     		;Oczekiwanie na pusty bufor wejœciowy.
  JC PETLA3_A20
  
;Komenda zapisu do portu wyjœciowego:
  MOV AL, 0D1H  		;Rozkaz zapisu portu wyjœciowego.
  OUT 64H, AL
  PETLA4_A20:
  XOR AX, AX
  IN AL, 64H
  BTR AX, 1    		;Oczekiwanie na pusty bufor wejœciowy.
  JC PETLA4_A20
  
;Zapis portu wyjœciowego:
  POP AX
  OR AL, 10B
  OUT 60H, AL
  MOV A20, 2
  CZY_A20
  JE KONIEC_A20
  
; nieskonczona petla
  JMP $
  KONIEC_A20:
ENDM

A20_OFF MACRO
LOCAL KONIEC_A20, PETLA1_A20, PETLA2_A20, PETLA3_A20, PETLA4_A20, WYLACZ_FAST
  CMP A20, 0
  JE KONIEC_A20
  CMP A20, 1
  JE WYLACZ_FAST
  
;Dezaktywacja A20 poprzez sterownik klawiatury:
;Oczekiwanie na pusty bufor wejœciowy:
  XOR AX, AX
  PETLA1_A20:
  IN AL, 64H
  BTR AX, 1
  JC PETLA1_A20
  
;Wys³anie komendy odczytu statusu
  MOV AL, 0D0H    		;Rozkaz odczytu portu wyjœciowego.
  OUT 64H, AL
  XOR AX, AX
  PETLA2_A20:
  IN AL, 64H
  BTR AX, 0     		;Stan bufora wyjœciowego (0 pusty, 1 dane s¹ jeszcze w buforze).
  JNC PETLA2_A20
  
;Odczyt stanu portu wyjœciowego:
  XOR AX, AX
  IN AL, 60H
  PUSH AX
  PETLA3_A20:
  IN AL, 64H
  BTR AX, 1     		;Oczekiwanie na pusty bufor wejœciowy.
  JC PETLA3_A20
  
;Komenda zapisu do portu wyjœciowego:
  MOV AL, 0D1H  		;Rozkaz zapisu portu wyjœciowego.
  OUT 64H, AL
  PETLA4_A20:
  XOR AX, AX
  IN AL, 64H
  BTR AX, 1    		;Oczekiwanie na pusty bufor wejœciowy.
  JC PETLA4_A20
  
;Zapis portu wyjœciowego:
  POP AX
  AND AL, 11111101B
  OUT 60H, AL
  MOV A20, 2
  CZY_A20
  JE KONIEC_A20
;Wy³¹czenie A20 metod¹ fast A20:
  WYLACZ_FAST:
  IN AL, 92H
  AND AL, 0FCH
  OUT 92H, AL
  KONIEC_A20:
ENDM

WPISZ_DESKRYPTORY MACRO
  MOV AX,DANE										
  MOV DS,AX										
  MOV DL,0			;20-bitowy adres bazowy segmentu danych.	
  SHLD DX,AX,4					
  SHL AX,4					
  MOV BX,OFFSET GDT_DANE	;Wpisanie adresu bazowego segmentu danych do odpowiednich	
  MOV [BX].BASE_1,AX		  ;pól deskryptora gdt_dane.				
  MOV [BX].BASE_M,DL					
  MOV AX,CS										
  MOV DL,0								    	
  SHLD DX,AX,4					
  SHL AX,4					
  MOV BX,OFFSET GDT_PROGRAM			
  MOV [BX].BASE_1,AX				
  MOV [BX].BASE_M,DL			
  MOV AX,SS					
  MOV DL,0								    	
  SHLD DX,AX,4					
  SHL AX,4					
  MOV BX,OFFSET GDT_STOS			
  MOV [BX].BASE_1,AX				
  MOV [BX].BASE_M,DL				
  MOV BX,OFFSET GDT_DANE	
  ;Przepisanie adresu bazowego oraz granicznego segmentu danych do  						
	;pseudoskryptora opisuj¹cego globaln¹ tablicê deskryptorów.
  MOV AX,[BX].BASE_1				
  MOV WORD PTR PDESKR+2,AX			        	
  MOV DL,[BX].BASE_M				
  MOV BYTE PTR PDESKR+4,DL			
  MOV WORD PTR PDESKR,GDT_SIZE-1
  LGDT PDESKR			;Za³adowanie rejestru GDTR.  
 ENDM     

TRYB_CHRONIONY MACRO	            				  	
  SMSW AX		          	;Prze³¹czenie procesora w tryb       		
  OR AX,1		          	;pracy chronionej.		            	
  LMSW AX							           	          		
  DB 0EAH		    	      ;Skok odleg³y do etykiety 	           		
  DW OFFSET CONTINUE		;continue oraz segmentu		
  DW 10H		          	;okreœlonego selektorem 10h (segment programu).         		
  CONTINUE:
  MOV AX,08		        	;Za³adowanie selektora 	           		
  MOV DS,AX			        ;segmentu danych.                             		 
  MOV AX,18H		      	;Za³adowanie selektora	      	     	
  MOV SS,AX		        	;segmentu stosu.		           		
ENDM

TRYB_RZECZYWISTY MACRO WYLACZYC_A20,PRZYWROCIC_IDTR	
  RETURN:
  MOV AX,DANE		        ;Procesor pracuje w trybie Real.     	
  MOV DS,AX			        ;Inicjalizacja rejestrów segmentowych.	           	
  MOV AX,STK							           	
  MOV SS,AX
  IF PRZYWROCIC_IDTR EQ 1
  LIDT ORG_IDT
  ENDIF
  IF WYLACZYC_A20 EQ 1
    A20_OFF
  ENDIF
  STI				            ;Odblokowanie przerwañ.	          	
  MOV AH,9			        ;Wydruk tekstu zapisane w zmiennej INFO. 	          	
  MOV DX,OFFSET INFO						           	
  INT 21H									
  MOV AX,4C00H			    ;Koniec pracy programu.	            
  INT 21H									            
ENDM

KONTROLER_PRZERWAN MACRO MASKA
;PROGRAMOWANIE KONTROLERA PRZERWAÑ
  MOV DX,20H			;Inicjacja pracy uk³adu  		
  MOV AL,11H			;icw1=11h       			
  OUT DX,AL                						
  INC DX                   						
  MOV AL,20H			;icw2=20h (offset wektora przerwañ)
  OUT DX,AL                						
  MOV AL,4		  	;icw3=04h (uk³ad master)		
  OUT DX,AL                 						
  MOV AL,1		  	;icw4=01h (tryb 8086/88)		
  OUT DX,AL               							
  MOV AL, MASKA		;ocw1=0fdh (maska przerwañ - master) 
  OUT DX,AL                       					
  MOV DX,0A1H			;Maska przerwañ – slave		
  MOV AL,0FFH              						
  OUT DX,AL                						
ENDM

WPISZ_IDTR MACRO
  MOV WORD PTR PDESKR,IDT_SIZE-1
  XOR EAX,EAX
  MOV AX,OFFSET IDT
  ADD EAX,EBP
  MOV DWORD PTR PDESKR+2,EAX
  SIDT ORG_IDT
  LIDT PDESKR
ENDM
;Odpowiednik instrukcji PUSHA w chwili gdy korzystanie ze stosu jest niewygodne:
PUSH_REG  MACRO
  MOV [SCHOWEK_REJESTROW],   EAX
  MOV [SCHOWEK_REJESTROW+4], EBX
  MOV [SCHOWEK_REJESTROW+8], ECX
  MOV [SCHOWEK_REJESTROW+12],EDX
  MOV [SCHOWEK_REJESTROW+16],ESI
  MOV [SCHOWEK_REJESTROW+20],EDI
ENDM
;Przywraca rejestry zachowane makrem PUSH_REG:
POP_REG MACRO
  MOV EAX, [SCHOWEK_REJESTROW]
  MOV EBX, [SCHOWEK_REJESTROW+4]
  MOV ECX, [SCHOWEK_REJESTROW+8]
  MOV EDX, [SCHOWEK_REJESTROW+12]
  MOV ESI, [SCHOWEK_REJESTROW+16]
  MOV EDI, [SCHOWEK_REJESTROW+20]
ENDM

;wypisanie na ekranie tekstu
WYPISZ MACRO NAZWA_ZM, WIELKOSC_ZM, OFFSET_EKRANU, ATRYBUT_ZN
LOCAL PETLA
  MOV BX, OFFSET NAZWA_ZM
  MOV CX, WIELKOSC_ZM
  MOV AL, [BX]
  MOV SI, 0
  PETLA:
    MOV ES:[SI+OFFSET_EKRANU], AL
    MOV AL, ATRYBUT_ZN
    MOV ES:[SI+OFFSET_EKRANU+1], AL
    INC BX
    INC SI
    INC SI
    MOV AL,[BX]
  LOOP PETLA
ENDM


PM_TASKS MACRO S_TSS0,S_TSS1,G_TSS0,G_TSS1
  MOV AX,SEG DANE           					
  SHL EAX,4					
  MOV EBP,EAX
  XOR EAX,EAX
  MOV AX,OFFSET S_TSS0
  ADD EAX,EBP	
  MOV BX,OFFSET G_TSS0
  MOV [BX].base_1,AX
  ROL EAX,16
  MOV [BX].base_m,AL
;TSS_1:	
  XOR EAX,EAX
  MOV AX,OFFSET S_TSS1
  ADD EAX,EBP
  MOV BX,OFFSET G_TSS1
  MOV [BX].base_1,AX
  ROL EAX,16
  MOV [BX].base_m,AL
ENDM

;dwie zagniezdzone pêtle w celu opoznienia dalszego wykonywania kodu
OPOZNIENIE MACRO ILE
LOCAL PRZEBIEG1
LOCAL PRZEBIEG2
	MOV BX, ILE
 PRZEBIEG2:
	MOV AX,0FFFFH
 PRZEBIEG1:	
	SUB AX,1
	CMP AX,0
	JNZ PRZEBIEG1

	SUB BX,1
	CMP BX,0
	JNZ PRZEBIEG2
ENDM

;wyczyszczenie calego ekranu po przez wypisanie na calym ekranie spacji/znaków bia³ych
CZYSC_EKRAN MACRO
LOCAL EKRN
 EKRN:
  MOV AL, PUSTE
	MOV BX, POZYCJA
	MOV ES:[BX],AX
 	
 	ADD POZYCJA, 2
 	
 	CMP POZYCJA, 6000
	JNE EKRN			                                    
ENDM

;zmiana koloru calego ekranu na podany w parametrze
KOLORUJ_EKRAN MACRO KOLOREK
LOCAL KLR
 KLR:
  MOV AL, PUSTE
	MOV BX, POZYCJA
	MOV AH, 06h
	MOV ES:[BX],AX
 	
 	ADD POZYCJA, 1
 	
 	CMP POZYCJA, 6000
	JNE KLR
ENDM
